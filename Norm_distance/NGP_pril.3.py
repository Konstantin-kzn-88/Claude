from typing import Dict, Union
from enum import Enum


class SpecialDistance(str, Enum):
    NOT_NORMALIZED = "+"  # Расстояния Правилами не устанавливаются
    PROJECT_DEFINED = "++"  # Расстояния определяются проектной документацией
    FLARE_HEIGHT = "h_fak"  # Высота факельного ствола


class OilGasFacilities2024:
    def __init__(self):
        # Справочник объектов
        self.facilities = {
            1: "Устья эксплуатационных нефтяных и газлифтных скважин",
            2: "Устья нагнетательных скважин",
            3: "Измерительные и сепарационные установки",
            4: "Дожимные насосные станции (технологические площадки)",
            5: "Аварийные вертикальные резервуары ДНС",
            6: "УПСВ",
            7: "Печи и блоки огневого нагрева нефти",
            8: "Факелы аварийного сжигания",
            9: "Свечи для сброса газа",
            10: "Компрессорные станции газлифта",
            11: "Установки подготовки газа, цеха подготовки газа, конденсата",
            12: "Блоки газораспределительной аппаратуры",
            13: "Кустовые насосные станции системы ППД",
            14: "Водораспределительные пункты, блоки напорной гребенки",
            15: "Дренажные, канализационные емкости",
            16: "Блоки для закачки химреагентов, ингибиторов коррозии и метанола",
            17: "Компрессорные воздуха",
            18: "Аппараты воздушного охлаждения",
            19: "ТП напряжением до 10 кВ и распределительные устройства",
            20: "Операторные, отдельно стоящие шкафы и блоки управления",
            21: "Вагон для обогрева персонала",
            22: "Вспомогательные здания",
            23: "Технологические емкости ЛВЖ, ГЖ, концевые сепарационные установки",
            24: "Устья эксплуатационных газовых и газоконденсатных скважин",
            25: "Насосная станция ЛВЖ, ГЖ"
        }

        # Инициализация пустой матрицы расстояний
        self.distances: Dict[int, Dict[int, Union[int, str, SpecialDistance]]] = {}
        self._initialize_distances()

    def _initialize_distances(self):
        """Инициализация матрицы расстояний"""
        # Создаем базовую структуру словаря для каждого объекта
        for i in range(1, len(self.facilities) + 1):
            self.distances[i] = {}

        # Заполняем матрицу расстояний из предоставленной таблицы
        distances_data = [
            [5, 5, 9, 30, 39, 39, 39, 100, 30, 39, 39, 9, 30, 9, 9, 9, 15, 30, "25/12", 24, 30, 39, 30, "-", 30],
            [5, 6, 9, 15, 24, 24, 24, 100, 30, 24, 24, 9, 15, 9, 9, 9, 15, 15, "25/12", 24, 30, 39, "++", "-", 15],
            [9, 9, "+", "+", 15, "+", 15, 60, 30, 9, 9, "+", 9, 9, 9, "+", 9, 15, "25/12", "++", 18, 39, "++", 9, "+"],
            [30, 15, "+", "+", 15, "+", 15, 60, 30, "+", "+", "+", 15, 9, 9, "+", 9, 15, "++", "++", 18, 39, "+", 30, "+"],
            [39, 24, 15, 15, "+", 15, 30, 100, 15, 15, 15, 15, 15, 15, "+", 12, 30, 30, "++", "++", 39, 39, 15, 39, 15],
            [39, 24, "+", "+", 15, "+", 15, 60, 30, "+", "+", "+", 15, 9, 9, "+", 9, 15, "++", "++", 18, 39, "+", 39, "+"],
            [39, 24, 15, 15, 30, 15, "+", 60, 30, 18, 18, 15, 15, 15, 9, 15, 9, 9, 15, 9, 18, 39, 15, 39, 15],
            [100, 100, 60, 60, 100, 60, 60, "h_fak", "h_fak", 100, 100, 60, 60, 60, 60, 60, 60, 100, 60, 60, 60, 100, 60, 100, 60],
            [30, 30, 30, 30, 15, 30, 30, "h_fak", "+", 30, 30, 30, 30, 30, 30, 30, 30, 30, 60, 60, 60, 100, 60, 30, 60],
            [39, 24, 9, "+", 15, "+", 18, 100, 30, "+", 9, "+", 15, 9, 9, 9, 9, 15, "++", "++", 30, 30, "+", 39, "+"],
            [39, 24, 9, "+", 15, "+", 18, 100, 30, 9, "+", "+", 15, 9, 9, "+", 9, 15, "++", "++", 30, 30, "+", 39, "+"],
            [9, 9, "+", "+", 15, "+", 15, 60, 30, "+", "+", "+", 15, 9, 9, 9, 9, 15, "++", "++", 18, 30, "+", 9, "+"],
            [30, 15, 9, 15, 15, 15, 15, 60, 30, 15, 15, 15, "+", "+", 9, 9, 9, 15, "++", "++", 9, 30, 15, "-", 15],
            [9, 9, 9, 9, 15, 9, 15, 60, 30, 9, 9, 9, "+", "+", 9, 9, 9, 15, "++", "++", 9, 30, 9, "-", 9],
            [9, 9, 9, 9, "+", 9, 9, 60, 30, 9, 9, 9, 9, 9, "+", 9, 9, 9, 9, 9, 9, 30, 9, 9, 9],
            [9, 9, "+", "+", 12, "+", 15, 60, 30, 9, "+", 9, 9, 9, 9, "+", 9, 15, "++", "++", 18, 30, "+", 9, "+"],
            [15, 15, 9, 9, 30, 9, 9, 60, 30, 9, 9, 9, 9, 9, 9, 9, "+", "+", 9, 9, 9, 9, 9, 16, 9],
            [30, 15, 15, 15, 30, 15, 9, 100, 30, 15, 15, 15, 15, 15, 9, 15, "+", "+", 9, 9, 9, 9, 15, 30, 15],
            ["25/12", "25/12", "25/12", "++", "++", "++", 15, 60, 60, "++", "++", "++", "++", "++", 9, "++", 9, 9, "+", "+", "++", "++", "++", "++", "++"],
            [24, 24, "++", "++", "++", "++", 9, 60, 60, "++", "++", "++", "++", "++", 9, "++", 9, 9, "+", "+", "++", "++", "++", 24, "++"],
            [30, 30, 18, 18, 39, 18, 18, 60, 60, 30, 30, 18, 9, 9, 9, 18, 9, 9, "++", "++", "+", "++", 18, 30, 18],
            [39, 39, 39, 39, 39, 39, 39, 100, 100, 30, 30, 30, 30, 30, 30, 30, 9, 9, "++", "++", "++", "++", 39, 39, 39],
            [30, 15, "+", "+", 15, "+", 15, 60, 60, "+", "+", "+", 15, 9, 9, "+", 9, 15, "++", "++", 18, 39, 15, 30, 15],
            ["+", "+", 9, 30, 39, 39, 39, 100, 30, 39, 39, 9, "+", "+", 9, 9, 16, 30, "++", 24, 30, 39, 30, 40, "-"],
            [30, 15, "+", "+", 15, "+", 15, 60, 60, "+", "+", "+", 15, 9, 9, "+", 9, 15, "++", "++", 18, 39, 15, "-", 9]
        ]

        for i in range(len(distances_data)):
            for j in range(len(distances_data[i])):
                value = distances_data[i][j]
                # Преобразуем специальные значения
                if value == "+":
                    value = SpecialDistance.NOT_NORMALIZED
                elif value == "++":
                    value = SpecialDistance.PROJECT_DEFINED
                elif value == "h_fak":
                    value = SpecialDistance.FLARE_HEIGHT
                self.distances[i + 1][j + 1] = value

    def get_distance(self, facility1_id: int, facility2_id: int) -> Union[int, str, SpecialDistance]:
        """
        Получить противопожарное расстояние между двумя объектами

        Args:
            facility1_id: ID первого объекта
            facility2_id: ID второго объекта

        Returns:
            Union[int, str, SpecialDistance]: Расстояние в метрах или специальное значение
        """
        if facility1_id not in self.facilities or facility2_id not in self.facilities:
            raise ValueError("Неверный ID объекта")

        try:
            return self.distances[facility1_id][facility2_id]
        except KeyError:
            raise ValueError("Нет данных о расстоянии между указанными объектами")

    def get_facility_name(self, facility_id: int) -> str:
        """Получить название объекта по его ID"""
        if facility_id not in self.facilities:
            raise ValueError("Неверный ID объекта")
        return self.facilities[facility_id]

    def get_all_distances_for_facility(self, facility_id: int) -> Dict[str, Union[int, str, SpecialDistance]]:
        """
        Получить все расстояния для конкретного объекта

        Args:
            facility_id: ID объекта

        Returns:
            Dict[str, Union[int, str, SpecialDistance]]: Словарь с расстояниями до других объектов
        """
        if facility_id not in self.facilities:
            raise ValueError("Неверный ID объекта")

        result = {}
        for other_id in self.facilities:
            try:
                distance = self.get_distance(facility_id, other_id)
                result[self.get_facility_name(other_id)] = distance
            except ValueError:
                continue
        return result


# Пример использования
if __name__ == "__main__":
    facilities = OilGasFacilities2024()

    # Пример 1: Получить расстояние между двумя объектами
    try:
        distance = facilities.get_distance(1, 3)
        print(f"Расстояние между {facilities.get_facility_name(1)} и {facilities.get_facility_name(3)}: {distance} м")
    except ValueError as e:
        print(f"Ошибка: {e}")

    # Пример 2: Получить все расстояния для конкретного объекта
    try:
        distances = facilities.get_all_distances_for_facility(6)
        print("\nРасстояния от УПСВ до других объектов:")
        for facility, distance in distances.items():
            print(f"- До {facility}: {distance}")
    except ValueError as e:
        print(f"Ошибка: {e}")